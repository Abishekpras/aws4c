#summary API Reference.
#labels Featured,Phase-Implementation

= Introduction =

The public AWS4C functions are divided into four groups:

    * [APIRef#Configuration_Functions Configuration Functions]
    * [APIRef#S3_Interface_Functions S3 Interface Functions]
    * [APIRef#SQS_Interface_Functions SQS Interface Functions]
    * [APIRef#IO_Buffer_Functions I/O Buffer Functions] 




==Configuration Functions==

===aws_init===
_void aws_init  (  )_

Initialize the library. This function must be the first AWS4C function called.

===aws_read_config===

_int aws_read_config 	( char `*` const *id*  )_  	

Read AWS authentication records.

Parameters:
    	* *id*  - user ID


This function loads AWS authentication credentials corresponding to the user identified by the user ID from ~/.awsAuth file.   All subsequent S3 and SQS operations will use these credentials.
This function must be called before the first SQS or S3 operation.   It can be called again when the credential switch is required.

See the [DevGuide#Authentication_Keys Developer's Guide] for details about the `~/.awsAuth` file.

===aws_set_debug====

_void aws_set_debug 	( int 	*d*  )  _	


Enable debugging output.

Parameters:
    	* *d* -  non-zero parameter causes debugging output to be printed

This function controls whether debugging output is printed out. Calling it with a non-zero parameter results in the printing of the debug messages.


===aws_set_id====

===aws_set_key===

===aws_set_keyid===

==IO Buffer Functions==

===aws_iobuf_new ===

_IOBuf`*` aws_iobuf_new (  )_ 	

Create a new I/O buffer.

Returns:
           a newly allocated I/O buffer

===aws_iobuf_append=== 

_void aws_iobuf_append  (  IOBuf `*`  *B*, char `*` *d*, int *len* )_		

Append data to I/O buffer.

Parameters:
    	* *B*  - I/O buffer
    	* *d*  - pointer to the data to be appended
    	* *len* -  length of the data to be appended


===aws_iobuf_getline===

_int aws_iobuf_getline 	( IOBuf `*`  *B*, char `*`  *Line*, int  *size*)_ 			

Read the next line from the buffer.

Parameters:
    	* *B*  - I/O buffer
    	* *Line* - character array to store the next line from the buffer
    	* *size* - size of the character array line

Returns:
    Number of characters read or 0 

===aws_iobuf_free=== 

_void aws_iobuf_free 	( IOBuf `*`  *bf* )_  	

Release IO Buffer.

Parameters:
    	* *bf* - I/O buffer to be deleted


== S3 Interface Functions  ==

==s3_set_host==

_void s3_set_host 	(    char `*`const    *str* 	 )_

Sets S3 host.  The AWS4C sets the default host to ‘s3.amazonaws.com`;  you only need to call this function if you want to use a different Simple Storage Services host.

Parameters:

       *   *str* -  hostname

==s3_set_bucket==

_ void s3_set_bucket 	( 	char `*`const  *str* 	 )  _	


Select current S3 bucket.  All subsequent S3 operations will be performed on this bucket.

Parameters:
    	* *str*  - bucket ID

==s3_get==

_int s3_get 	( IOBuf `*` *b*,  char `*` const  *file*) _			

Downloads the  file from the current bucket and  places the data into the I/O buffer.

Parameters:
    	* * b * - I/O buffer
    	* * file * - filename

Returns: 
            0 on success or an error code on failure.  Also check the return code in I/O buffer. For more information see [DevGuide#Checking_results_of_AWS_operation Checking results of AWS operation].

==s3_put==

_int s3_put   ( IOBuf `*` *b*, char `*` const   *file* )_

Uploads the file into currently selected bucket and takes the data from I/O buffer.  

Parameters:
    	* *b*  - I/O buffer
    	* *file* - filename

Returns: 
            0 on success or an error code on failure.  Also check the return code in I/O buffer. For more information see  [DevGuide#Checking_results_of_AWS_operation Checking results of AWS operation].



==SQS Interface Functions== 

==sqs_create_queue==

_int sqs_create_queue 	( IOBuf `*` *b*, char `*` const *name* )_ 			

Create an SQS queue.

Parameters:
    	* *b* -	I/O buffer
    	* *name*  -	queue name

Returns:
    0 on success, or an error code on failure 

==sqs_list_queues==
 
_int sqs_list_queues 	( IOBuf *  *b* ,char `*` const *prefix*	)_			

Retrieves URL of the queue.   

Parameters:
    	* *b* -	I/O buffer
    	* *prefix*  -	queue prefix. better use the whole name

Returns:
    0 on success, or an error code on failure 

URL is placed into the I/O buffer. Use [APIREF#aws_iobuf_get_line aws_iobuf_get_line] to retrieve it


==sqs_get_queueattributes ==

int sqs_get_queueattributes 	(  IOBuf `*`  *b*,   char `*`  url,  int `*`  *timeOut*,  int `*`  *nMesg* ) 			

Retrieve queue’s default visibility timeout and approximate number of messages.

Parameters:
    	* *b* -	I/O buffer
    	* *url* -	queue url. Use sqs_list_queues to retrieve
    	* *timeOut* -  points to a variable that will get the value of queue visibility timeout
    	* *nMesg*  -   points to a variable that will get the value of approximate number of messages in the queue

Returns:
   0 on success, or an error code on failure 

       Note that given the distributed nature of the SQS service it is not possible to get the exact number of messages in the queue.  This function tries its best to get an approximate number, which is good enough for capacity estimation.


==sqs_set_queuevisibilitytimeout ==

_int sqs_set_queuevisibilitytimeout 	(  IOBuf `*` *b*, char `*` *url*, int  sec )_

		
Set the queue's visibility timeout.

Parameters:
    	* *b* -	I/O buffer
    	* *url* -	queue url. Use sqs_list_queues to retrieve
    	* *sec* -	queue visibility timeout in seconds

Returns:
     0 on success, or an error code on failure 




==sqs_send_message ==

_int sqs_send_message  (  IOBuf `*`  *b*, char `*` const  *url*, char `*`const *msg* )_	

Send a message to the queue.

Parameters:
    	* *b* -	I/O buffer
    	* *url* -	queue url. Use sqs_list_queues to retrieve
    	* *msg* -	a message to send

Returns:
     0 on success, or an error code on failure 


==sqs_get_message ==

_int sqs_get_message ( IOBuf `*` *b*, char *const *url*, char `*` *id* )_

Retrieve a message from the queue.

Parameters:
    	* *b* 	- I/O buffer
    	* *url* - queue url. Use sqs_list_queues to retrieve
    	* *id* - message receipt handle.

Returns:
     0 on success, or an error code on failure 

Message contents are placed into the I/O buffer Caller must allocate at least 1024 bytes of  memory for the receipt.

==sqs_delete_message ==

_int sqs_delete_message ( IOBuf `*` *bf*, char `*`const *url*, char `*`  *receipt* )_

Delete a processed message from the queue.

Parameters:
    	* *bf* - I/O buffer
    	* *url* - queue url. Use sqs_list_queues to retrieve
    	* *receipt* - message receipt handle.

Returns:
     0 on success, or an error code on failure 