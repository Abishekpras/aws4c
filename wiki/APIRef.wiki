#summary API Reference.
#labels Featured,Phase-Implementation

= Introduction =

The public AWS4C functions are divided into four groups:

    * [APIRef#Configuration_Functions Configuration Functions]
    * [APIRef#S3_Interface_Functions S3 Interface Functions]
    * [APIRef#SQS_Interface_Functions SQS Interface Functions]
    * [APIRef#IO+Buffer+Functions I/O Buffer Functions] 




==Configuration Functions==

===aws_init===
_void aws_init  (  )_

Initialize the library. This function must be the first AWS4C function called.

===aws_read_config===

_int aws_read_config 	( char `*` const *id*  )_  	

Read AWS authentication records.

Parameters:
    	* *id* 	user ID


This function loads AWS authentication credentials corresponding to the user given user ID   from ~/.awsAuth file.   All subsequent S3 and SQS operations will use these crendentials.
This function must be called before the first SQS or S3 operation.   It could be called again when the credential switch is required.

See [DevGuide#Authentication_Keys Developer's Guide] for details about ‘~/.awsAuth` file.

===aws_set_debug====

_void aws_set_debug 	( int 	*d*  )  _	


Enable debugging output.

Parameters:
    	* *d* 	non-zero causes debugging output to be printed

This function controls whether debugging output is printer out. Calling it with non-zero parameter causes the debug messages to be printed out.


===aws_set_id====

===aws_set_key===

===aws_set_keyid===

==IO Buffer Functions==

===aws_iobuf_new ===

_IOBuf`*` aws_iobuf_new (  )_ 	

Create a new I/O buffer.

Returns:
           a newly allocated I/O buffer

===aws_iobuf_append=== 

_void aws_iobuf_append  (  IOBuf `*`  *B*, char `*` *d*, int *len* )_		

Append data to I/O buffer.

Parameters:
    	* *B* 	 I/O buffer
    	* *d* 	 pointer to the data to be appended
    	* *len*  length of the data to be appended


===aws_iobuf_getline===

_int aws_iobuf_getline 	( IOBuf `*`  *B*, char `*`  *Line*, int  *size*)_ 			

Read the next line from the buffer.

Parameters:
    	* *B* 	I/O buffer
    	* *Line* 	character array to store the read line in
    	* *size* 	size of the character array Line

Returns:
    Number of characters read or 0 

===aws_iobuf_free=== 

_void aws_iobuf_free 	( IOBuf `*`  *bf* )_  	

Release IO Buffer.

Parameters:
    	* *bf* 	I/O buffer to be deleted


== S3 Interface Functions  ==

==s3_set_host==

_void s3_set_host 	(    char `*`const    *str* 	 )_

Sets S3 host.  The AWS4C sets the default host to ‘s3.amazonaws.com’ ,  you only need to call this function if you want to use different Simple Storage Services host.

Parameters:

       *   *str*  hostname

==s3_set_bucket==

_ void s3_set_bucket 	( 	char `*`const  *str* 	 )  _	


Select current S3 bucket.  All subsequent S3 operations will be performed on this bucket.

Parameters:
    	* *str* 	bucket ID

==s3_get==

_int s3_get 	( IOBuf `*` *b*,  char `*` const  *file*) _			

Downloads the  file from the current bucket and  places the data into the I/O buffer.

Parameters:
    	* * b * 	I/O buffer
    	* * file * 	filename

Returns: 
            0 on success or an error code on failure.  Also check the return code in I/O buffer. See [DevGuide#Checking_results_of_AWS_operation Checking results of AWS operation].

==s3_put==

_int s3_put   ( IOBuf `*` *b*, char `*` const   *file* )_

Upload the file into currently selected bucket, takes the data from I/O buffer.  

Parameters:
    	* *b* 	I/O buffer
    	* *file* 	filename

Returns: 
            0 on success or an error code on failure.  Also check the return code in I/O buffer. See [DevGuide#Checking_results_of_AWS_operation Checking results of AWS operation].



==SQS Interface Functions== 